[[ bool ]]
# true ; t ; f t
# false ; t ; f f

#3 if ; b ; t ; f . . b t f
#2 and ; a ; b . . a b false
#2 or ; a ; b . . a true b
#1 not ; a . . a false true
#2 xor ; a ; b . . a . . b false true b
#2 comp ; f ; g ; v . g . f v

# and_op ; a ; b . . a b false
# or_op ; a ; b . . a true b
# not_op ; a . . a false true
# xor_op ; a ; b . . a . . b false true b

[[ https://en.wikipedia.org/wiki/Fixed-point_combinator ]]
#1 recur ; f . ; x . f . x x ; x . f . x x

[[ (a b) ]]
#2 pair ; a ; b ; f . . f a b
#1 first ; p . p ; a ; b a
#1 second ; p . p ; a ; b b
[[ converts `a -> b -> c` to `(a b) -> c` ]]
#1 uncurry ; f ; p . p f
[[ converts `(a b) -> c` to `a -> b -> c` ]]
#1 curry ; f ; a ; b . f pair a b
#2 depair ; p ; f . p f

[[ option v ]]
#1 some ; v ; s ; n . s v
# none ; s ; n n
#1 is_some ; o . . o ; _ true false
#2 is_none ; o . . o ; _ false true
#1 unwrap ; o . . o ; v v PANIC
#3 match_option ; o ; s ; n . . o s n
#2 map_option ; o ; s . . o s none

[[ li 1 li 2 li 3 none = [1 2 3] ]]
#2 li ; a ; b some pair a b

#3 match_list ; l ; ht ; e match_option l ; l . l ht e
#2 map_list_head ; l ; ht map_option l ; l . l ht
#1 unwrap_head ; l first unwrap l
#1 unwrap_tail ; l second unwrap l

[[ (A -> B -> B) -> B -> list A -> B ]]
#3 foldr recur ; foldr ; f ; z ; l
match_list l
    ; h ; t . . f h . . . foldr f z t
    z

[[ (A -> B) -> list A -> list B ]]
#2 map_list recur ; map_list ; f ; l
map_list_head l
    ; h ; t li . f h . . map_list f t

[[ (A -> option B) -> list A -> list B ]]
#2 map_filter_list recur ; map_filter_list ; f ; l
map_list_head l
    ; h ; t match_option . f h
        ; v li v . . map_filter_list f t
        . . map_filter_list f t

[[ list A -> list B -> list (A B) ]]
#2 zip recur ; zip ; a ; b
map_list_head a
    ; ah ; at map_list_head b
        ; bh ; bt li pair ah bh . . zip at bt

[[ list A -> list B -> AB -> list (A B) ]]
#3 zip_fill recur ; zip_fill ; a ; b ; fill
match_list a
    ; ah ; at match_list b
        ; bh ; bt
            li pair ah bh . . . zip_fill at bt fill
        li pair ah fill . . . zip_fill at none fill
    map_list_head b
        ; bh ; bt li pair fill bh . . . zip_fill none bt fill

[[ list (A B) -> (list A list B) ]]
#1 unzip ; l
foldr ; ab ; asbs
        depair ab ; a ; b
        depair asbs ; as ; bs
        pair li a as li b bs
      pair none none
      l

[[ interpreter doesn't touch undefined symbols  ]]
[[ so this thing outputs in readable-ish format ]]
[[ third argument is the rest of the program    ]]
#3 print ; n ; v ; c . . . . n ( v ) c

print 1 if true 1 2
print 2 if false 1 2
print 3 and 1 2
print 4 or 1 2 [[ nested comments btw ]]
print 5 xor 1 2
# val xor or and false true true not false
print 6 val
print 7 if not val abacaba asdfasfd
print 8 foldr ; a ; b xor a b false li true li not false none
print 9 foldr ; a ; b . a b 0 li 1 li 2 li 3 li 4 none


[[ numbers are lists of bool   ]]
[[ 10 = 0b1010 = [0 1 0 1]     ]]
[[ bits are written in reverse ]]
# ten li false li true li false li true none
# one li true none
[[ zero may be empty list             ]]
[[ following falses do not affect num ]]
[[ [] ~ [0 0 0 0]                     ]]
# zero none
#2 xor_nums ; a ; b map_list uncurry xor_op zip_fill a b false
# eleven xor_nums one ten

print 10 eleven

#2 eq_nums ; a ; b not foldr or_op false xor_nums a b

print 11 eq_nums eleven li true li true li false li true none

[[ trits ]]
# up      ; u ; n ; d u
# neutral ; u ; n ; d n
# down    ; u ; n ; d d
#1 inc_sat_trit ; t . . . t up up neutral
#2 add_sat_trit_bool ; t ; b . . b inc_sat_trit t t
#1 is_up ; t . . . t true false false
#1 bool_into_trit ; b ; u b

[[ zip_fill num num -> carry: bool -> num ]]
#2 add_full recur ; add_full ; ab ; c match_list ab
    ; abh ; abt li 
        xor c . uncurry xor_op abh
        . . add_full abt is_up . uncurry ; a ; b add_sat_trit_bool add_sat_trit_bool bool_into_trit c a b abh
    if c li true none none
#2 add ; a ; b add_full zip_fill a b false false

print 12 eq_nums add ten zero ten
print 13 eq_nums add ten one eleven
# two add one one
# three add one two
print 14 eq_nums three li true li true none
print 15 eq_nums add three three li false li true li true none
# six add three three
# n12 add six six
# n15 add n12 three
print 16 n15


[[ list bool -> bool ]]
#1 all recur ; all ; l
match_list l
    ; h ; t if h . all t false
    true

[[ implementation taken straight from                                                ]]
[[ https://hackage.haskell.org/package/base-4.21.0.0/docs/Data-List.html#v:transpose ]]
[[ T -> list list T -> list list T ]]
#1 trans recur ; trans ; xss
match_list xss
    ; xs ; xss
    match_list xs
        ; x ; xs
            # hdstls unzip map_filter_list
                ; l match_list l
                    ; h ; t some pair h t
                    none
                xss
            depair hdstls ; hds ; tls
            #4 combine ; y ; h ; ys ; t
                li li y h . trans li ys t
            combine x hds xs tls
        . trans xss
    none

end
